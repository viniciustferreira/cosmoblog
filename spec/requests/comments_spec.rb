require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/comments", type: :request do
  let(:user) do
    User.create(email: "teste@email.com", password: "123456")
  end

  let(:new_post) do
    Post.create(user_id: user.id, title: 'teste', body: 'teste')
  end

  let(:valid_attributes) {
    {
      user_id: user.id,
      post_id: new_post.id,
      body: 'teste'
    }
  }

  let(:invalid_attributes) {
    {
      user_id: user.id,
      post_id: new_post.id,
      body: ''
    }
  }

  before(:each) do
    sign_in user
  end

  describe "GET /edit" do
    it "renders a successful response" do
      comment = Comment.create! valid_attributes
      get edit_post_comment_url(new_post, comment)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Comment" do
        expect {
          post post_comments_url(new_post), params: { comment: valid_attributes }
        }.to change(Comment, :count).by(1)
      end

      it "redirects to the created comment" do
        post post_comments_url(new_post), params: { comment: valid_attributes }
        expect(response).to redirect_to(post_url(new_post))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Comment" do
        expect {
          post post_comments_url(new_post), params: { comment: invalid_attributes }
        }.to change(Comment, :count).by(0)
      end

    
      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post post_comments_url(new_post), params: { comment: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        {
          user_id: user.id,
          post_id: new_post.id,
          body: 'teste 2'
        }
      }

      it "updates the requested comment" do
        comment = Comment.create! valid_attributes
        patch post_comment_url(new_post, comment), params: { comment: new_attributes }
        expect {
          comment.reload
        }.to change(comment, :body).from("teste").to('teste 2') 
      end

      it "redirects to the comment" do
        comment = Comment.create! valid_attributes
        patch post_comment_url(new_post, comment), params: { comment: new_attributes }
        comment.reload
        expect(response).to redirect_to(post_url(new_post))
      end
    end

    context "with invalid parameters" do
    
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        comment = Comment.create! valid_attributes
        patch post_comment_url(new_post, comment), params: { comment: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested comment" do
      comment = Comment.create! valid_attributes
      expect {
        delete post_comment_url(new_post, comment)
      }.to change(Comment, :count).by(-1)
    end
  end
end
